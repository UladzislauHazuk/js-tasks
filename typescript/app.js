// 1. У вас есть массив объектов вида приведенного в приложении. Необходимо вывести все товары, количество которых больше 10
var array = [
    { id: 1, title: "Часы", count: 10, price: 500 },
    { id: 2, title: "Смартфон", count: 33, price: 1500 },
    { id: 3, title: "Моноблок", count: 6, price: 2200 },
    { id: 4, title: "Ноутбук", count: 13, price: 3000 },
    { id: 5, title: "Планшет", count: 22, price: 2100 },
];
var wrapper = function (array) {
    var count = 0;
    var min = array[0].price;
    return function (elem) {
        count++;
        console.log("\u041A\u043E\u043B\u0438\u0447\u0435\u0441\u0442\u0432\u043E: ".concat(count));
        elem.price < min ? (min = elem.price) : null;
        console.log("\u041C\u0438\u043D\u0438\u043C\u0430\u043B\u044C\u043D\u0430\u044F \u0446\u0435\u043D\u0430: ".concat(min));
    };
};
var wrap = wrapper(array);
for (var i = 0; i < array.length; i++) {
    wrap(array[i]);
}
//  10. У вас есть массив объектов вида приведенного в приложении. Пользователь вводит значение id: например, 1. Необходимо отобразить в консоль найденный объект используя алгоритм бинарного поиска.
// 11. У вас есть массив строковых значений. Необходимо вывести количество дубликатов в массиве:
// [1, 2, 1, 2, 3, 4, 5, 1] -> 3
// 12. Напишите программу для вывода чисел Фибоначчи используя рекурсию
// 13. Напишите программу для сортировки массива объектов из приложения по id,
// использующую метод пузырька.
// 14. Реализовать функцию f: при вызове f(2, 3) -> вернет 5, при вызове f(2)(3), тоже
// вернет 5. Использовать каррирование
// 15. Более сложный вариант. Реализовать функцию f: при вызове f(1, 2, 3) -> вернет 6,
// при вызове f(1)(2)(3)(), тоже вернет 6. Использовать каррирование
// 16. Напишите код, который сделает из массива объект
// [ {name: 'width', value: 10}, {name: 'height', value: 20} ] -> {width: 10, height: 20}
