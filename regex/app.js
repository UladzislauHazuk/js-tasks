// 1. На вход подается строка в виде числа. Необходимо написать регулярное выражение. Если строка состоит только из чисел, то вывести булевое true, в противном случае бросить исключение и обработать

// const num = '123456789';

// function checkNum(str) {
//     try {
//         if (!/^[\d]+$/g.test(str)) throw new Error('Не числа');
//         return true;
//     } catch (error) {
//         return error.message;
//     }

// }

// console.log(checkNum(num));

// 2. На вход подается строка вида “имя фамилия возраст”. Необходимо написать регулярное выражение для данной строки. Если же строка подходит под регулярное выражение, то вывести булевое true, в противном случае бросить исключение и обработать

// const name = 'Vladislav Gazuk 25';

// function checkStr(str) {
//     try {
//         if (!/^[a-zA-Z]+ [a-zA-Z]+ [\d]{1, 2}+$/g.test(str)) throw new Error('Не подходит');
//         return true;
//     } catch (error) {
//         return error.message;
//     }

// }

// console.log(checkNum(name));





// 3. На вход подается строка из 2 и более слов. Необходимо все пробелы заменить на “!”. Если же длина исходной строки изменилась, вывести true, в противном случае бросить исключение и обработать

// const str = 'Vladislav Gazuk';

// function changeStr(str) {
//     try {
//         const strChanged = str.replaceAll(/ /g, '!');
//         if (strChanged.includes(' ')) throw new Error('Не изменился пробел');
//     } catch (error) {
//         return error.message;
//     }
// }

// console.log(changeStr(str));

// 4. На вход подается строка в виде электронной почты пользователя. Необходимо написать регулярное выражение для данной строки. Если же строка подходит под регулярное выражение, то вывести булевое true, в противном случае бросить исключение и обработать

// const mail = 'vladislav.gazuk@gmail.com';

// function checkEmail(email) {
//     try {
//         if (!/^[a-zA-Z0-9_\-\.]+@[a-z]+\.[a-z]{1,3}$/g.test(email)) throw new Error('Не подходит формат почты');
//         return email;
//     } catch (error) {
//         return error.message;
//     }
// }

// console.log(checkEmail(mail));




// 5. На вход подается строка в виде url. Необходимо написать регулярное выражение для данной строки. Если же строка подходит под регулярное выражение, то вывести булевое true, в противном случае бросить исключение и обработать

// const url = 'https://github.com/VladislavGazuk';

// function checkUrl(url) {
//     try {
//         if (!/^(http|https):\/\/[a-zA-Z]+\.[a-z]{1,3}\/[\w]+$/g.test(url)) throw new Error('Не подходит url');
//         return url;
//     } catch (error) {
//         return error.message;
//     }
// }

// console.log(checkUrl(url));

//   6. На вход подается строка вида: путь к файлу. Необходимо написать регулярное выражение для данной строки. Если же строка подходит под регулярное выражение, то вывести булевое true, в противном случае бросить исключение и обработать
// C:\Users\Admin\Desktop\test.txt -> true
// C:/Users/Admin/Desktop/test.txt -> true
// 7. На вход подается строка в виде пароля. Необходимо написать регулярное
// выражение для данной строки. Если же строка подходит под регулярное выражение, то вывести булевое true, в противном случае бросить исключение и обработать.
// Пароль должен содержать:
// • Буквы в UPPER регистре
// • Буквы в LOWER регистре
// • Числа
// • Специальные символы
// • Длина не менее 8 символов
// 8. Данастрокасостоящаяизчисел,букв,специальныхсимволов.Необходимо
// оставить в строке только буквенные символы используя регулярные выражения. Если же длина исходной строки изменилась, вывести true, в противном случае бросить исключение и обработать

//  9. Банкоматы позволяют использовать 4 или 6 значные PIN-коды, а PIN-коды не могут содержать ничего, кроме ровно 4 или ровно 6 цифр. Необходимо написать регулярное выражение для данной строки. Если же строка подходит под регулярное выражение, то вывести булевое true, в противном случае бросить исключение и обработать
// "1234“ -> true "12345“ -> false "a234“ -> false
// 10. Неопытный Junior запушил в GitHub html файл с комментариями. Team Lead не оценил использование комментариев в ветке development и попросил их убрать. Вырезая куски кода вы поняли, что их чересчур много. Необходимо написать регулярное выражение, которое вырежет все комментарии из html разметки
// <!-- -->